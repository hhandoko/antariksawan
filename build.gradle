/**
 * File     : build.gradle
 * License  :
 *   Copyright (c) 2019 antariksawan Contributors
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *           http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jcenter.bintray.com' }
    }
}

plugins {
    id 'io.spring.dependency-management'
    id 'com.github.johnrengelman.shadow'
    id 'net.ltgt.apt-eclipse'
    id 'net.ltgt.apt-idea'
}

apply plugin: 'application'
apply plugin: 'java'

version rootProject.file('VERSION.txt').text.trim()
group 'com.hhandoko.antariksawan'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jcenter.bintray.com' }
}

dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:${micronautVersion}"
    }
}

dependencies {
    annotationProcessor 'io.micronaut:micronaut-inject-java'
    annotationProcessor 'io.micronaut:micronaut-validation'
    compile 'io.micronaut:micronaut-inject'
    compile 'io.micronaut:micronaut-validation'
    compile 'io.micronaut:micronaut-runtime'
    compile 'io.micronaut:micronaut-http-client'
    compile 'io.micronaut:micronaut-http-server-netty'
    compileOnly 'com.oracle.substratevm:svm'
    compileOnly 'io.micronaut:micronaut-inject-java'
    runtime "ch.qos.logback:logback-classic:${logbackVersion}"
    runtime 'io.micronaut:micronaut-graal'
    testCompile "junit:junit:${junitVersion}"
    testCompile 'io.micronaut:micronaut-inject-java'
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
}

shadowJar {
    mergeServiceFiles()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "${rootProject.group}.Application"

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}
